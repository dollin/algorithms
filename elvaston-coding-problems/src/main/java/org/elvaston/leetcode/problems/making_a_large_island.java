package org.elvaston.leetcode.problems;

import org.elvaston.leetcode.difficulty.hard;
import org.elvaston.leetcode.tags.depth_first_search;

/**
 * https://leetcode.com/problems/making-a-large-island/
 *
 * In a 2D grid of 0s and 1s, we change at most one 0 to a 1.
 *
 * After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).
 *
 * Input: [[1, 0], [0, 1]]
 * Output: 3
 * Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
 *
 * Input: [[1, 1], [1, 0]]
 * Output: 4
 * Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
 *
 * Input: [[1, 1], [1, 1]]
 * Output: 4
 * Explanation: Can't change any 0 to 1, only one island with area = 4.
 *
 *
 * Notes:
 *
 * 1 <= grid.length = grid[0].length <= 50.
 * 0 <= grid[i][j] <= 1.
 */
@hard
@depth_first_search
public class making_a_large_island {

    public static void main(String[] args) {
        System.out.println("6=" + new making_a_large_island().largestIsland(new int[][]{{1,1,0},{0,1,0},{1,1,0}}));
        System.out.println("142=" + new making_a_large_island().largestIsland(new int[][]{{0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1},{1,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1},{1,1,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1},{1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0},{1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0},{1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1},{1,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0},{1,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0},{0,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,1},{1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0},{1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1},{0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0},{1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0},{1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,0},{1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1},{1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1},{1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1},{0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1},{1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,0},{0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,1,0},{0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1},{1,0,1,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1},{0,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1},{1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,0},{1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,1,0,1,0,1},{0,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0},{1,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1},{1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0},{1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1},{1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,0,1},{1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0},{0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,0,1,0,0,0,0,1,1,1},{1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1},{1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,0},{0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0},{1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0},{1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0},{1,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1},{1,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0},{1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0},{1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0},{1,0,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1},{0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,0},{0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0},{0,0,1,1,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1},{0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1},{0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1}}));
    }

    public int largestIsland(int[][] grid) {

        if (has(grid, 1)) {
            return 1;
        }
        if (has(grid, 0)) {
            return grid.length * grid[0].length;
        }

        int largestIsland = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0) {
                    boolean[][] visited = new boolean[grid.length][grid[0].length];
                    visited[i][j] = true;
                    biggest(grid, i, j, visited);
                    largestIsland = Math.max(largestIsland, count(visited));
                }
            }
        }
        return largestIsland;
    }

    private int count(boolean[][] visited) {
        int count = 0;
        for (int i = 0; i < visited.length; i++) {
            for (int j = 0; j < visited[0].length; j++) {
                if (visited[i][j]) {
                    count++;
                }
            }
        }
        return count;
    }

    private boolean has(int[][] grid, int val) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == val) {
                    return false;
                }
            }
        }
        return true;
    }

    private void biggest(int[][] grid, int i, int j, boolean[][] visited) {
        if (!visited[i][j] && grid[i][j] == 0) {
            return;
        }
        if (grid[i][j] == 1) {
            visited[i][j] = true;
        }
        if (j > 0 && !visited[i][j - 1]) {
            biggest(grid, i, j - 1, visited);
        }
        if (j + 1 < grid[0].length && !visited[i][j + 1]) {
            biggest(grid, i, j + 1, visited);
        }
        if (i > 0 && !visited[i - 1][j]) {
            biggest(grid, i - 1, j, visited);
        }
        if (i + 1 < grid.length && !visited[i + 1][j]) {
            biggest(grid, i + 1, j, visited);
        }
    }
}
